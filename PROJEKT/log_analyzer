#!/bin/bash

# Funkcja wyświetlająca pomoc
function show_help {
    echo "Usage: $0"
    echo "Interactive log analyzer script."
    exit 0
}

# Funkcja sprawdzajaca istnienie pliku z logami
function check_log_file {
    if [ ! -f "$1" ]; then
        echo "Error: Log file '$1' does not exist."
        exit 1
    fi
}

# Funkcja parsujaca logi
function parse_logs {
    perl controller.pl --parse --file "$LOG_FILE"
}

# Funkcja do wyboru filtrow
function apply_filters {
    FILTER_DATE_APPLIED=false
    FILTER_IP_APPLIED=false
    FILTER_USER_AGENT_APPLIED=false
    FILTER_URL_APPLIED=false
    FILTER_STATUS_APPLIED=false

    while true; do
        clear
        echo "Do you want to apply any filters? (y/n)"
        read -r APPLY_FILTERS
        clear
        if [ "$APPLY_FILTERS" == "n" ]; then
            break
        fi

        echo "Choose a filter to apply:"
        if [ "$FILTER_DATE_APPLIED" == "false" ]; then
            echo "1. Date"
        fi
        if [ "$FILTER_IP_APPLIED" == "false" ]; then
            echo "2. IP"
        fi
        if [ "$FILTER_USER_AGENT_APPLIED" == "false" ]; then
            echo "3. User Agent"
        fi
        if [ "$FILTER_URL_APPLIED" == "false" ]; then
            echo "4. URL"
        fi
        if [ "$FILTER_STATUS_APPLIED" == "false" ]; then
            echo "5. Status"
        fi
        echo "6. Exit"

        read -p "Enter option: " FILTER_CHOICE
        clear

        case $FILTER_CHOICE in
            1)
                if [ "$FILTER_DATE_APPLIED" == "false" ]; then
                    read -p "Enter the date filter (format: YYYY-MM-DD): " FILTER_DATE
                    perl controller.pl --filter-date "$FILTER_DATE"
                    FILTER_DATE_APPLIED=true
                else
                    echo "Date filter already applied."
                fi
                ;;
            2)
                if [ "$FILTER_IP_APPLIED" == "false" ]; then
                    read -p "Enter the IP filter: " FILTER_IP
                    perl controller.pl --filter-ip "$FILTER_IP"
                    FILTER_IP_APPLIED=true
                else
                    echo "IP filter already applied."
                fi
                ;;
            3)
                if [ "$FILTER_USER_AGENT_APPLIED" == "false" ]; then
                    read -p "Enter the user agent filter: " FILTER_USER_AGENT
                    perl controller.pl --filter-user-agent "$FILTER_USER_AGENT"
                    FILTER_USER_AGENT_APPLIED=true
                else
                    echo "User agent filter already applied."
                fi
                ;;
            4)
                if [ "$FILTER_URL_APPLIED" == "false" ]; then
                    read -p "Enter the URL filter: " FILTER_URL
                    perl controller.pl --filter-url "$FILTER_URL"
                    FILTER_URL_APPLIED=true
                else
                    echo "URL filter already applied."
                fi
                ;;
            5)
                if [ "$FILTER_STATUS_APPLIED" == "false" ]; then
                    read -p "Enter the status filter: " FILTER_STATUS
                    perl controller.pl --filter-status "$FILTER_STATUS"
                    FILTER_STATUS_APPLIED=true
                else
                    echo "Status filter already applied."
                fi
                ;;
            6)
                break
                ;;
            *)
                echo "Invalid choice. Please choose again."
                ;;
        esac
    done
}

# Funkcja generujaca raport
function generate_report {
    perl controller.pl --generate-report
}

# Funkcja eksportujaca raport
function export_report {
    read -p "Enter the name of the file you want to save the report (without extension): " REPORT_FILE_NAME
    read -p "Enter the export format (text/csv): " EXPORT_FORMAT
    clear

    if [ "$EXPORT_FORMAT" == "text" ]; then
        perl controller.pl --export-text
        mv output/report.txt "output/${REPORT_FILE_NAME}.txt"
        echo "Report exported to output/${REPORT_FILE_NAME}.txt"
    elif [ "$EXPORT_FORMAT" == "csv" ]; then
        perl controller.pl --export-csv
        mv output/report.csv "output/${REPORT_FILE_NAME}.csv"
        echo "Report exported to output/${REPORT_FILE_NAME}.csv"
    else
        echo "Invalid export format. Please choose 'text' or 'csv'."
        exit 1
    fi
}

# Funkcja pytajaca o stworzenie kolejnego raportu
function create_another_report {
    read -p "Do you want to create another report? (y/n): " CREATE_ANOTHER
    if [ "$CREATE_ANOTHER" == "n" ]; then
        rm -rf temp/*
        echo "Exiting..."
        exit 0
    else
        clear
        rm -rf temp/*
    fi
}

# Glowna funkcja
function main {
    while true; do
        read -p "Enter the path to the log file: " LOG_FILE
        clear
        check_log_file "$LOG_FILE"
        parse_logs
        apply_filters
        generate_report
        export_report
        echo "Report generated and exported successfully."
        create_another_report
    done
}

# Sprawdzenie argumentów
if [ "$1" == "-h" ]; then
    show_help
fi

clear
main