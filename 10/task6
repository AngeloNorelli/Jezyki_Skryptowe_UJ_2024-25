#!/bin/bash

# Sprawdzenie, czy podano odpowiednią liczbę argumentów
if [ $# -ne 1 ]; then
    echo "Użycie: $0 <plik>" >&2
    exit 1
fi

logfile=$1

# Sprawdzenie, czy plik istnieje
if [ ! -f "$logfile" ]; then
    echo "Plik $logfile nie istnieje" >&2
    exit 1
fi

# Przetwarzanie logu przy użyciu awk
awk '
{
    # Pobranie IP
    ip = $1

    # Pobieranie ścieżki żądania (7. pole logu, usunięcie znaki "GET/POST")
    if ($7 ~ /^\/[^ ]*/) {
        request = $7

        # Tworzenie unikalnego klucza IP + żądanie
        unique[ip " " request]++
    }
}
END {
    # Zliczanie liczby unikalnych żądań dla każdego IP
    for (key in unique) {
        split(key, parts, " ")
        ip = parts[1]
        request = part[2]

        # Zliczanie tylko tych żadań, które wystąpiły tylko raz
        if (unique[key] == 1) {
        counts[ip]++
        }
    }

    # Przygotowanie wyników do sortowania
    n = 0
    for (ip in counts) {
        n++
        sorted_results[n] = counts[ip] " " ip
    }

    # Sortowanie: liczba unikalnych żądań (malejąco), IP (rosnąco)
    #asort(sorted_results, sorted_results, "@val_num_desc")
    for (i = 1; i <= n; i++) {
        for (j = i + 1; j <= n; j++) {
            split(sorted_results[i], a, " ")
            split(sorted_results[j], b, " ")

            if (a[1] < b[1] || (a[1] == b[1] && a[2] > b[2])) {
                temp = sorted_results[i]
                sorted_results[i] = sorted_results[j]
                sorted_results[j] = temp
            }
        }
    }

    # Wyświetlanie maksymalnie 10 wyników
    for (i = 1; i <= 10 && i <= n; i++) {
        split(sorted_results[i], parts, " ")
        print parts[2], parts[1]
    }
}
' "$logfile"
